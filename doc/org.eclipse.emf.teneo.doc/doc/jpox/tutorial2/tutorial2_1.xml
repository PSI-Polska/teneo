<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
--> 

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.2 $ $Date: 2006/09/13 10:42:37 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Initialize the Library Editor</title> 
	</header> 
	<body>
		<section>
			<title>Set dependencies of EMF model and editor plugins</title>
			<p>The EMF persistency plugin (org.eclipse.emf.teneo.jpox) has to be added 
			to the dependencies tab of the plugin.xml of <em>both</em> the library and the
			library.editor plugin project.</p>
		</section>
		<section>
			<title>Enable JPOX Support for the EMF model project</title>
			<p>Next JPOX support needs to be enabled for the library (model) project. Right click on the project
			and in the JPOX menu select 'Add JPOX Support' and then check 'Enable Auto Enhancement'.</p>
			<p>Note: see <a href="../troubleshooting.html#Build+path+contains+duplicate+entries">here</a> if you 
				get the following message in the problem view: <em>build path
				contains duplicate entry: ....</em>.</p>
		</section>
		<section>
			<title>Initialization</title>
			<p>To initialize the EMF/JPOX layer the following code has to be added to static inner
				class <em>Implementation</em> in the <em>LibraryEditorPlugin</em> class.</p>
			<source>
public void start(BundleContext context) throws Exception 
{
	org.eclipse.osgi.framework.debug.Debug.DEBUG_GENERAL = true;
	Properties properties = new Properties();
	properties.setProperty(PMFConfiguration.JDO_DATASTORE_DRIVERNAME_PROPERTY, "com.mysql.jdbc.Driver");
	properties.setProperty(PMFConfiguration.JDO_DATASTORE_URL_PROPERTY, "jdbc:mysql://127.0.0.1:3306/mylibrary");
	properties.setProperty(PMFConfiguration.JDO_DATASTORE_USERNAME_PROPERTY, "root");
	properties.setProperty(PMFConfiguration.JDO_DATASTORE_PASSWORD_PROPERTY, "root");
  
	// create/register the JpoxDataStore, set the db props and the epackages to persist, initialize creates
	// the database
	String pmfName = "library"; // the name of the JpoxDataStore
    	JpoxDataStore jpoxDataStore = JpoxHelper.INSTANCE.createRegisterDataStore(pmfName);
    	jpoxDataStore.setProperties(properties);
    	jpoxDataStore.setEPackages(new EPackage[]{LibraryPackage.eINSTANCE});
    	jpoxDataStore.initialize();

	// this is required to force the editor to retrieve the correct resource
	Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("library", new JPOXResourceDAOFactory());

	super.start(context);
}
		</source>
			<p>Remarks:</p>
			<ul>
			<li>The properies have to be changed to contain your own database connection 
			information.</li>
			<li>The above source code uses the database mylibrary. This database has to exist (but can be empty).</li>
			<li><strong>The name of the datastore is chosen on purpose. The extension of the resource name (library in this case)
			is used to find the datastore, so therefore here the name library is chosen.</strong></li>
			</ul>
		</section>
		<section>
			<title>Resource Factory setting</title>
			<p>For this tutorial an EMF JPOX resource factory has to be specified. This is done
				by setting the library element of the org.eclipse.emf.ecore.extension_parser extension
				point to: org.eclipse.emf.teneo.jpox.resource.JPOXResourceDAOFactory (see image below).</p>
			<p>
			<img src="../images/resource_factory.gif" alt="Enabling JPOX support for the library project"/>
			</p>				
			<p>Remarks:</p>
			<ul>
			<li>For this tutorial the JPOX DAO resource is registered for the library extension. In general
				for integration	with a generated EMF Editor a JPOX DAO resource should be used.</li>
			<li>Note that the JPOX resource is normally loaded without a JPOXResource.DS_NAME_PARAM parameter in the url. If there is 
			no dsname parameter in the url then the JPOX resource will use the extension of the filename
			to find the PersistenceManagerFactory.</li>
			</ul>
		</section>
		<section>
			<title>Create valid EMF Objects</title>
			<p>The standard generated EMF Library example creates invalid objects. For example when you run the editor
			you can save a Library object with an empty name while this is a required element. 
			The EMF/JPOX layer is more precise and will not allow this.</p>
			<p>To prevent this add the following code in the performFinish method of the LibraryModelWizard
			class in the library editor project. This has to be added around line 216 after the rootObject variable has been set:</p>
			<source>
if (rootObject instanceof Library)
{
	((Library)rootObject).setName("My Library");
}
else if (rootObject instanceof Book)
{
	((Book)rootObject).setTitle("My Title");
}
else if (rootObject instanceof Writer)
{
	((Writer)rootObject).setName("My Name");
}
</source>
			<p></p>
			<p></p>
			<p>Please click <a href="tutorial2_2.html">here</a> to go to the next step.</p>
		</section>
	</body>
</document>
