<?xml version="1.0"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>JPOX EMF Resources</title> 
    <notice>Describes the use of emf resource implemenations for jpox</notice>
    <abstract>From the 0.7.5 release the EMF-JPOX integration offers one type of resource: JPOXResource. It 
    		extends the org.eclipse.emf.ecore.resource.impl.ResourceImpl.
    </abstract> 
  </header> 
  <body>
	 <p></p>
    <section>
      <title>Resource URI</title>
      <p>The integration layer automatically registers the JPOX resource for the 
		  protocol: jpox and jpoxdao. <em>The jpoxdao protocol is deprecated and present because of backwards compatibility.</em></p>
		 <p>From the 0.7.5 release the EMF-JPOX integration offers one type of resource: JPOXResource. The previous JPOXResourceDAO is no 
		 longer used. The jpox protocol will from now return a JPOXResource instance.</p>
	  <p>The JPOX resource needs to know how to reach a data store. This is done by passing the name
	  of a JpoxDataStore to the resource with the JPOXResource.DS_NAME_PARAM parameter. The name of the 
	  JpoxDataStore is the name used when creating/registering a JpoxDataStore
	  using the JpoxHelper.INSTANCE object.
	  </p>
	  <p>An example of a URI which returns a JPOX resource: <em>jpox://dsname=MyPMF</em>.</p>
	</section>
    <section>
      <title>JPOX Resource</title>
      <p>The JPOX Resource (org.eclipse.emf.teneo.jpox.resource.JPOXResource) starts a 
		  transaction in the load action and commits and reopens a transaction for the save action.
		</p>
		<p>This behavior has the following consequences:</p>
		<ul>
		  <li>The assumption is that optimistic transactions are enabled.</li>
		  <li>After saving the resource the saved objects can still be used by the application, so no refresh
			  is required. </li>
		  <li>ELists are lazily loaded, primitive type fields and single EReferences are 
			  loaded when the resource is loaded. </li>
		</ul>
	</section>
    <section>
      <title>Sharing one PersistenceManager between Resources, One transaction when saving multiple resources</title>
		<p>As a standard behavior the resource will create its own PersistenceManager (pm) at load time.
		However, there are cases when you want to use one pm to load and save multiple resources. This 
		is for example the case when there are references between objects in different resources. 
		In this case the load and save actions of multiple resources should use the same pm and be done
		in the same transaction.</p>
		<p>To support this Teneo has the concept of a PMController. A PMController manages one pm
		for multiple resources. A PMController is registered using a specific name. When a resource is opened this
		name is passed as an uri parameter. Using this name the JPOXResource can then find the PMController
		and retrieve a pm. When a JPOXResource has a PMController then the JPOXResource does not itself 
		create a pm or begin and commit transactions. Beginning and committing transactions is the responsibility
		of the application itself.</p>
		<p>Here is some example code illustrating the use of a PMController:</p>
		<source>
	PMController pmc = new PMController();

	// when creating a PMController you have to pass your JpoxDataStore instance
	pmc.setJpoxDataStore(jpoxDataStore);

	// register the PMController, the name is used in the uri of the resource
	PMController.registerPMController("testsc", sc);

	// create an uri using the PMController name
	URI uri1 = URI.createURI("hibernate://?" + JPOXResource.SESSION_CONTROLLER_PARAM + "=testsc&amp;query1=select from " + BookImpl.class.getName());
	URI uri2 = URI.createURI("hibernate://?" + JPOXResource.SESSION_CONTROLLER_PARAM + "=testsc&amp;query1=select from " + WriterImpl.class.getName());
	// resourceSet has to be set before somehow..
	final Resource res1 = resourceSet.createResource(uri1);
	final Resource res2 = resourceSet.createResource(uri2);
	
	// now load the resources 
	pmc.getPM().currentTransaction().begin();
	res1.load(Collections.EMPTY_MAP);
	res2.load(Collections.EMPTY_MAP);
	pmc.getPM().currentTransaction().commit();
	
	// do something usefull with your loaded resources...

	// and save them
	pmc.getPM().currentTransaction().begin();
	res1.save(Collections.EMPTY_MAP);
	res2.save(Collections.EMPTY_MAP);
	pmc.getPM().currentTransaction().commit();
		</source>
		<p><strong>Loading different EObjects (refering to eachother) in different resources can have side-effects if
		there are containment relations to and from these EObjects (with resolving=false). 
		If the containment relation is non-resolving then
		EMF will place an EObject always in the same resource as its container. If you use queries to load your resources
		then the containers are loaded also. For example: assume EObjects A1 and A2 both have container A0. If one resource
		loads A1 then A0 is also loaded automatically and A0 and A1 are in the same resource. If then a second resource loads
		A2 then A2 will be placed in the first resource because its container is located there. Overall this results in 
		unpredictable behavior. So: to correctly work with multiple resources the containment relations should be set to
		resolving = true.</strong></p>
		</section>
		<section>
	  		<title>Closing a resource</title>
      <p>The JPOXResource can be closed by calling the unload method. 
		  This method will close the PersistenceManager. In case a PMController is used
		  the unload method will just nullify the internal pm member, you should close
		  the pm explicitly.</p>
	</section>
      <section>
      <title>Validation</title>
      <p>The JPOX Resource automatically validates its content (the EObjects) when the
		  resource is saved. This validation makes use of the EMF validation framework through calls to
		  the Diagnostician.INSTANCE.validate method. Validation fails when a ERROR level Diagnostic is
		  encountered. In this case the resource save method will throw an org.eclipse.emf.teneo.StoreValidationException. 
		  This exception has a method to retrieve all Diagnostics.</p>
	</section>
		<section>
	  		<title>Standard load behavior: Top level types</title>
      <p>When a EMF/JPOX resource is loaded (without using the query customizations) then only the so called top-level types are directly present in 
		  the resource contents. Top-level types are types which are not used as the 
		  the child in a containment relation. The assumption is that all contained types can be reached
	  from a top-level type.</p>
	  <p>See also the <a href="knownissues.html">Known Issues</a>.</p>
	  </section>
	 <section><title>Customizing load behavior</title>
	 <p>It is possible to customize what the resource actually loads from the database.</p>
		 <section><title>Extend the resource implementation with a Java subclass</title>
			<p>It is possible to customize the load behavior by overriding the loadFromStore method
				in JPOXResourceDAO. This method gets a PersistenceManager and should return a list of  
				objects read from the JDO/JPOX datastore.
			</p>
		 </section>
		 <section><title>Set specific queries to load the resource</title>
			<p>There are two ways to pass specific queries to the JPOXResourceDAO. The first method
				is using uri parameters:</p>
			 <p><em>jpox://?dsname=mystore&amp;query1=SELECT FROM org.eclipse.example.library.impl.WriterImpl</em></p>
			 <p>Two things are important here: 1) for JDO the query should fully qualified classnames to the concrete
			 implementation classes, 2) you can pass multiple queries by using parameter names which start with query, for
			 example query1, query2 etc.</p>
			 <p>The other way to pass queries to the resource are to specify them in the 
			 .ejdo file (see resource utility <a href="resource_utility.html">here</a>). An
			 example (commented out) of this can be found in the ejdo file <a href="download/library.ejdo">here</a>.</p>
		 </section>
	 </section>
		<section>
	  		<title>Closing a resource</title>
      <p>The EMF/JPOX resource can be closed by calling the unload method. This method will close the 
		  used Persistence Manager.</p>
	  </section>
		  
  </body> 
</document>
