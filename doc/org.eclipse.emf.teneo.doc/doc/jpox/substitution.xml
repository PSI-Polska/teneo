<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2005-2006, Elver.org (http://www.elver.org).

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.1 $ $Date: 2006/08/03 09:58:08 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Persisting Substitution Groups</title> 
	</header> 
	<body>
		<p>This page explains how Substitution Groups are supported in the persistency layer. 
		This is provided as background information as this is normally hidden for the application developer.
		</p>
		<section><title>Example XML Schema with Substitution Group</title>
		<p>The XML Schema below (copied from 
				<a href="http://www.zvon.org/xxl/XMLSchemaTutorial/Output/ser_substitution_st0.html">zvon.org</a>) 
				shows an example of the use of a Substitution Group.</p>
			<source><![CDATA[
  <xsd:element name="root">
    <xsd:complexType>
      <xsd:sequence minOccurs="1">
        <xsd:element ref="myAbstract"/>
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

  <xsd:element name="myAbstract" type="AAA" abstract="true"/>

  <xsd:simpleType name="AAA">
    <xsd:restriction base="xsd:integer">
      <xsd:minInclusive value="1"/>
      <xsd:maxInclusive value="9"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:element name="odd" substitutionGroup="myAbstract">
    <xsd:simpleType>
      <xsd:restriction base="AAA">
        <xsd:enumeration value="1"/>
			......
        <xsd:enumeration value="9"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>
  
  <xsd:element name="even" substitutionGroup="myAbstract">
    <xsd:simpleType>
      <xsd:restriction base="AAA">
        <xsd:enumeration value="2"/>
			.....
        <xsd:enumeration value="8"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>
			]]></source>
			</section>
			<section><title>Java source code for Substitution Group</title>
			<p>This xml schema will result in getters/setters of the following (truncated form):</p>
			<source>
/**
 * ........
 * @model unique="false" dataType="org.eclipse.emf.ecore.EFeatureMapEntry" required="true"
 *        extendedMetaData="kind='group' name='myAbstract:group' namespace='##targetNamespace'"
 * @generated
 */
FeatureMap getMyAbstractGroup();

/**
 * ........
 * @model unique="false" dataType="org.elver.store.test.emf.schemaconstructs.substitutionzvon.AAA" 
 *        required="true" transient="true" changeable="false" volatile="true" derived="true"
 *        extendedMetaData="kind='element' name='myAbstract' namespace='##targetNamespace' group='myAbstract:group'"
 * @generated
 */
BigInteger getMyAbstract();
	</source>
			<p>As is visible one FeatureMap getter is generated for the Substitution Group element. This
				FeatureMap will keep track of which elements (combination of StructuralFeature and 
				value) is actually used. In addition a getter (getMyAbstract) is generated for direct
				access to the value.
			</p>
		</section>
		<section>
			<title>Persisting a Substitution Group</title>
			<p>The Substitution Group element is a FeatureMap which is mapped as a collection with embedded types.
			The embedded type is org.elver.store.jpox.emf.elist.GenericFeatureMapEntry. The mapping for the above example
			is shown below. For more information regarding persisting FeatureMaps see <a href="featuremap.html">here</a>.</p>
			<source><![CDATA[
<field name="myAbstractGroup" persistence-modifier="persistent">
	<collection element-type="org.elver.store.jpox.emf.elist.GenericFeatureMapEntry">
		<extension vendor-name="jpox" key="cache-lazy-loading" value="true"/>
	</collection>
	<join/>
	<element>
	<embedded>
		<field name="featurePath"/>
		<field name="localAnyValue" embedded="true">
			<extension vendor-name="jpox" key="implementation-classes" value="java.math.BigInteger"/>
			<extension vendor-name="elver.org" key="estructuralfeatures" value="myAbstract"/>
		</field>
		<field name="localReferenceValue" embedded="true">
			<extension vendor-name="jpox" key="implementation-classes" 
				value="org.elver.store.jpox.emf.mapping.AnyTypeEObject"/>
			<extension vendor-name="elver.org" key="estructuralfeatures" value=""/>
			<foreign-key delete-action="restrict" update-action="cascade"/>
		</field>
		<field name="localContainmentReferenceValue" dependent="true" embedded="true">
			<foreign-key delete-action="cascade" update-action="cascade"/>
			<extension vendor-name="jpox" key="implementation-classes" 
				value="org.elver.store.jpox.emf.mapping.AnyTypeEObject"/>
			<extension vendor-name="elver.org" key="estructuralfeatures" value=""/>
		</field>
	</embedded>
	</element>
</field>
			]]></source>
		</section>
		<section>
			<title>Benefits/Consequences of this approach</title>
			<p>The chosen approach has a number of benefits/consequences:</p>
			<ul>
				<li>The extensions to persist Substitution Groups are completely hidden for the application developer.
				He/She can use the standard EMF apis.</li>
				<li>No unnecessary columns: a (nullable) column is only created for the type which can 
				be used in place of the Substitution Group.</li>
				<li>Advanced querying possible: foreign keys are created in the entry table for references 
					to other classes (tables). This means that it is possible to join tables using advanced
					SQL or JDOQL queries.</li>
				<li>Features such as delete restrictions work directly and without
				any further extra specifications.</li>
			</ul>
		</section>
	</body>
</document>
