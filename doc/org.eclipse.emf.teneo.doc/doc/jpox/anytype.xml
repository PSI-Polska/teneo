<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2005-2006, Elver.org (http://www.elver.org).

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.1 $ $Date: 2006/08/03 09:58:08 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>xsd:any and xsd:anyType</title> 
	</header> 
	<body>
		<p>This page explains how xsd:any and xsd:anyType elements are stored in a relational store. 
		This is provided as background information as this is normally hidden for the application developer.
		</p>
		<section><title>Element with xsd:anyType</title>
		<section>
			<title>Element with type xsd:anyType and maxOccurs="1"</title>
			<p>The following xml schema defines an element with type xsd:anyType and maxOccurs="1":</p>
			<source><![CDATA[
<xsd:element name="singleAnyType" type="xsd:anyType"/>				
			]]></source>
			<p>This xml schema will result in getters/setters of the following (truncated form):</p>
			<source>
/**
 * ......
 * @model containment="true" resolveProxies="false" required="true"
 *        extendedMetaData="kind='element' name='singleAnyType'"
 * @generated
 */
EObject getSingleAnyType();

/**
 * ......
 * @generated
 */
void setSingleAnyType(EObject value);
		</source>
			<p>As is visible the EObject type is used as the member type. When storing any EObject in the database Elver
				persistency will use two columns (both varchar). The first columns is used to store the datatype if the 
				EObject if it is a primitive type. The second column either stores the String representation of a 
				primitive value or the unique object id as defined by JPOX.
			</p>
		</section>
		<section>
			<title>Element with type xsd:anyType and maxOccurs="unbounded"</title>
			<p>The following xml schema defines an element with type xsd:anyType and maxOccurs="unbounded":</p>
			<source><![CDATA[
<xsd:element name="multiAnyType" type="xsd:anyType" maxOccurs="unbounded"/>				
			]]></source>
			<p>This xml schema will result in a getter of the following (truncated form):</p>
			<source>
/**
 * ..............
 * @model type="org.eclipse.emf.ecore.EObject" containment="true" resolveProxies="false" required="true"
 *        extendedMetaData="kind='element' name='multiAnyType'"
 * @generated
 */
EList getMultiAnyType();
	</source>
			<p>As is visible the member is an EList which can contain EObject types. The maxOccurs="unbounded" anytype is 
			mapped as a collection with an embedded PersistenceCapable type: org.elver.store.jpox.emf.mapping.AnyTypeEObject.</p>
				<source><![CDATA[
<field name="multiAnyType" persistence-modifier="persistent" embedded="true" delete-action="restrict">
	<collection element-type="org.elver.store.jpox.emf.mapping.AnyTypeEObject">
		<extension vendor-name="jpox" key="cache-lazy-loading" value="true"/>
	</collection>
	<join>
		<column name="TESTANY_MULTIANYTYPE_ID" allows-null="true"/>
	</join>
	<order/>
	<element>
		<embedded>
			<field name="classifier">
				<column name="CLASSIFIER"/>
			</field>
			<field name="value">
				<column name="VALUE"/>
			</field>
		</embedded>
	</element>
</field>
				]]></source>
			<p>This mapping will result
				in a separate table which has a number of columns: 1) reference to the owner table, 
				2) index field to keep track of the order, 3) is used to store the datatype if the 
				EObject is a primitive type, and 4) either stores the String representation of a 
				primitive value or the unique object id as defined by JPOX.
			</p>
		</section>
		<section>
			<title>Setting a primitive value in an xsd:anyType member</title>
			<p>It is possible to set a primitive value in an xsd:anyType member.
				Elver persistency assumes that primitive values are set using an EObject which implements 
				org.eclipse.emf.ecore.xml.type.SimpleAnyType. An example of such an object is:
				org.eclipse.emf.ecore.xml.type.impl.SimpleAnyTypeImpl.
				When a primitive type is retrieved from the relational store then 
				the system will encapsulate the primitive value in a 
				org.elver.store.jpox.emf.JPOXSimpleAnyTypeImpl object.
			</p>
		</section>
		</section>
		<section><title>xsd:any Element</title>
			<p>The following xml schema defines a xsd:any element:</p>
			<source><![CDATA[
<xsd:any maxOccurs="unbounded" namespace="##other"/>
			]]></source>
			<p>This xml schema will result in getter of the following (truncated form):</p>
			<source>
/**
 * ..........
 * @model unique="false" dataType="org.eclipse.emf.ecore.EFeatureMapEntry" required="true" many="true"
 *        extendedMetaData="kind='elementWildcard' wildcards='##other' name=':4' processing='strict'"
 * @generated
 */
FeatureMap getAny();
	</source>
			<p>The xsd:any type is translated into a FeatureMap which allows different features to be added.
				The implementation of the xsd:any FeatureMap is different from the <a href="featuremap.html">derived feature</a>.
				In case of xsd:any the system can not determine which types can be stored in this element. Instead the 
				system will store all objects in a separate table. This table will have four columns:
				 1) reference to the owner table, 
				2) index field to keep track of the order, 3) is used to store the datatype if the 
				EObject is a primitive type, and 4) either stores the String representation of a 
				primitive value or the unique object id as defined by JPOX.
			</p>
			<p>Note:</p>
			<ul>
				<li>The persistency solution ignores the namespace XML Schema attribute of the xsd:any
				element. It is assumed that the EMF layer will handle this attribute.</li>
				<li>It is possible to set maxOccurs="1" or maxOccurs="unbounded" on the xsd:any
				element. For the java implementation and the persistency solution this makes no difference.
				In both cases a FeatureMap with a separate table is used. The EMF layer will check that
				no more than maxOccurs entries are stored in the FeatureMap.</li>
			</ul>
		</section>
		
				<section>
			<title>Benefits/Consequences of this approach</title>
			<p>The chosen approach has a number of benefits/consequences:</p>
			<ul>
				<li>The extensions to persist xsd:any/xsd:anyType are completely hidden for the application developer.
				He/She can use the standard EMF apis.</li>
				<li>Support for containment (including cascading delete)</li>
				<li>No support for JDOQL querying on content of xsd:any fields.</li>
				<li>No constraint checking when an eobject referenced from an xsd:any is deleted.</li>
			</ul>
		</section>
	</body>
</document>
