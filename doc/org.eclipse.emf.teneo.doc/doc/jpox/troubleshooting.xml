<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2005-2006, Elver.org (http://www.elver.org).

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.1 $ $Date: 2006/08/03 09:58:08 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Troubleshooting</title> 
	</header> 
	<body>
		<p><em>For troubleshooting please also visit the <strong><a href="knownissues.html">Known Issues</a></strong> page.</em></p>
		<section>
			<title>JPOX Configuration and Use Details</title>
			<p>The following <a href="jpox_details.html">page</a> discusses a number of details related to the 
			configuration and use of the EMF/JPOX layer. This can possibly explain unexpected behavior.</p>
		</section>
		<section id="ormapper">
			<title>Troubleshooting the OR Mapper and Resource Utilities</title>
			<p>If an error popup is shown or no popup box appears after the OR Mapper plugin is finished then an application
			error has occured within the OR Mapper/Resource utility.</p>
			<p>The OR Mapper menu option only works if the ecore file is located in the same Java Project as the generated
			EPackage sources.</p>
			<p>When the console shows this exception: <em>Exception in thread "main" java.lang.NoClassDefFoundError: org/elver/store/jpox/mapper/GenerateJDO</em>
			then you have not added the org.elver.store.jpox.runtime to the dependencies of the model plugin.</p>
			<p>
			To analyze what the problem is first view the error log. The error log
			can be opened through: <em>Window > Show View > Error Log</em>. See below for an example
			of an error in the OR Mapper (created on purpose for this example). By doubleclicking on the lines in
			the error log you can get more information.
			</p>
			<p><img src="images/plugin_error.jpg" alt="View on the error log for plugins"/></p>
			<p></p>
			<p>When you see the exception java.lang.NoSuchMethodError: org.eclipse.emf.common.util.AbstractEnumerator then 
			you need to upgrade to EMF 2.2</p>
			<p>More information is present in the log file generated by the Elver plugins. The log 
			file can be found in the .metadata/.plugins/org.elver.store.jpox.eclipse or .metadata/.plugins/org.elver.store.eclipse subdirectory in the Eclipse workspace directory (note
			the dots before metadata and plugins).</p>
			<p><img src="images/log_file.jpg" alt="Path to the logfile"/></p>
			<p></p>
			<p></p>
			<p>The or mapping can also be generated programmatically this can give more insight in the issues, see <a href="jpoxdatastore.html#Programmatic+generation+of+package.jdo">here</a>.</p>
			<p>When mailing a question regarding these type of errors please also post the logfile.
			Logfiles are automatically copied to a backup if 250kb has been reached, only one backup file is maintained.</p>
		</section>
		<section id="enhancermapper">
			<title>Troubleshooting the JPOX Enhancer</title>
			<p>Problems in the JPOX enhancer are often related to the installation of the JPOX plugin, e.g. an incorrect classpath setting in the preferences or
				an invalid package.jdo file. The JPOX Enhancer will write debug and log messages to the console in Eclipse.
				if this does not happen please check the log4j settings.
			</p>
			<section>
				<title>JPOX Plugin installation</title>
			<p>If you do not see a specific JPOX submenu when right clicking on a Java package, then the JPOX plugin
			is not installed. To check what is wrong look in the workspace/.metadata/.log file, where workspace 
			is your workspace directory.
			</p>
			</section>
			<section>
				<title>Classpath error</title>
			<p>A classpath error will be made visible like the image below. This particular error 
				can be solved by adding the required jars to the classpath of the JPOX Enhancer 
				(in this case the JPOX Core jar, see <a href="installation.html">installation instructions)</a>.
			</p>
			<p><img src="images/enhancer_error_no_class.jpg" alt="Error message no class found"/></p>				
			</section>
			<section>
				<title>Incorrect package.jdo</title>
			<p>The JPOX Enhancer will notify you if there is an error in the package.jdo. 
				The error message shown by the JPOX Enhancer in the console
				does not look very alarming (no red blinking text). See the image below. 
			</p>
			<p><img src="images/error_jdo.jpg" alt="Error message in the console"/></p>
			<p>The main symptom of an error condition is that the enhancement ends with
			the statement <em>Initialising 0 JDO Files</em>. A few lines above that in the 
			console you will see 2 lines with the error message. 
			</p>
			<p>If you post a question about an error in the enhancer to the mailing list then please also post the content of the console and
				the package.jdo file</p>
			</section>
		</section>
		<section id="runtime">
			<title>Troubleshooting the Runtime layer</title>
			<p>The runtime layer uses commons-logging for logging. Please set the log level to debug to get the most information.</p>
			<p>If you use the runtime layer within a plugin then log messages will not appear in the console. In this 
				case check the error log view (<em>Window > Show View > Error Log</em>) or let the log messages be
				written to a file.
			</p>
			<p><em>As an extra debug enabling you can add the following line in the EMF editor plugin:</em></p>
			<source>
org.eclipse.osgi.framework.debug.Debug.DEBUG_GENERAL = true;
			</source>
			<p>This will result in much more debugging information in the console.</p>
		</section>
		<section>
			<title>Common issues</title>
			<section><title>Derby database and cascading deletes</title>
			<p>
			Elver will specify foreign keys with cascade delete in the mapping file if required 
		by the model (for example with containment). However Derby does not support cascading deletes and will
		throw an error in the initialisation phase. The only solution is to manually delete the cascade delete
		foreign key tags in the package.jdo. Elver does not know at mapping file generation time which database
		is used and can therefore not know if cascade deletes are supported or not.
			</p>
			</section>
			<section><title>Created new model through new model wizard: diagnostic error</title>
			<p>The generated EMF model wizard allows invalid documents. When going through the 
			wizard you need to select a type to create as the first document in the resource. The 
			EMF model wizard creates an empty (all members are null) instance of this type and adds
				 it to the JPOX resource. Before the JPOX resource is 
			saved it checks if the content of the resource is valid. When nullable-constraints
				are violated a StoreValidationException (with Diagnostics) is thrown.</p>
			<p>To solve this you should make your model more relaxed (make elements nullable) or
				add a small amount of code, which sets the non-nullable fields, to the model wizard. An example of this last solution
				is illustrated in the Library Tutorial. 
			</p>
			</section>
			<section><title>OR Mapper: java.lang.NoSuchMethodError: org.eclipse.emf.common.util.AbstractEnumerator</title>
			<p>When you run the or mapper and no popup box is shown then view the error log. If the error log shows the 
			stacktrace below then you need to upgrade to EMF 2.2</p>
			<source><![CDATA[
java.lang.NoSuchMethodError: org.eclipse.emf.common.util.AbstractEnumerator.<init>(ILjava/lang/String;Ljava/lang/String;)V
at org.elver.store.annotations.pannotation.InheritanceType.<init>(InheritanceType.java:182)
at org.elver.store.annotations.pannotation.InheritanceType.<clinit>(InheritanceType.java:85)
at org.elver.store.jpox.eclipse.popup.actions.GenerateJDOActionSuperTable.run(GenerateJDOActionSuperTable.java:42)
at org.eclipse.ui.internal.PluginAction.runWithEvent(PluginAction.java:246)
			]]></source>
			</section>
			<section>
				<title>java.lang.NoClassDefFoundError when initializing runtime layer (1)</title>
				<p>This error occurs when the runtime layer is initialized. It occurs because your 
			application (and ecore libraries) are not present in the classpath of the runtime layer.
			To solve this issue add the following line to the Manifest.MF of your EMF model project:
			</p>
			<p>Eclipse-RegisterBuddy: org.elver.store.jpox.runtime</p>
			<p>See also the <a href="installation.html">installation</a> page</p>
			</section>
			<section>
				<title>java.lang.NoClassDefFoundError when starting/initializing runtime layer (2)</title>
				<p>When your model is divided over different projects/plugins then the registerbuddy setting has to 
				be set in the project with the 'widest' classpath (the project with a classpath containing the other plugins).
				For example if you have the following two emf projects:</p>
				<ul><li>Core</li><li>Specific (which uses/imports Core)</li></ul>
				<p>Then the registerbuddy should only be in the META-INF of the 'Specific' project. This is required 
				otherwise Jpox will not see the 'Specific' project. Setting register-buddy in both 'Core' and 'Specific' 
				will also result in classpath errors in Jpox.</p>
			</section>
			<section>
				<title>Exception in thread "main" java.lang.NoClassDefFoundError: org/elver/store/jpox/mapper/GenerateJDO</title>
				<p>You have not added the org.elver.store.jpox.runtime to the dependencies of the model plugin. Add the 
				org.elver.store.jpox.runtime plugin to the dependencies of the model project and set the register buddy setting
				in the Manifest file.</p>
			</section>
			<section>
				<title>Build path contains duplicate entries</title>
				<p>It is possible that you get a message in the Problems view: build path
				contains duplicate entry: ..... This occurs when JPOX support was enabled
			for the project before the org.elver.store.jpox.runtime was added to the dependency tab of the plugin.xml
			of the EMF model project.
			To resolve this, choose 'Remove JPOX Support' in the JPOX menu and then choose 'Add JPOX Support' again.
			The JPOX Libraries node in the project build path should disappear. The JPOX Libraries node is not
			necessary because the org.elver.store.jpox.runtime already provides all the required libraries.</p>
			</section>
			<section>
				<title>The resource is empty in the generated editor</title>
				<p>The JPOX resources will only load EMF objects which have been enhanced. To ensure that
				the EMF classes are enhanced make sure that 'Enable Auto Enhancement' is checked in the 
				JPOX submenu. The JPOX submenu is displayed when you right click on the EMF model project.</p>
				<p>See also the <a href="knownissues.html">Know Issues</a>.</p>
			</section>
			<section>
				<title>Different versions of jar files in JPOX Enhancer plugin classpath and versions in org.elver.store.jpox.runtime</title>
				<p>After updating the org.elver.store.jpox.runtime plugin it is important to let the jar files
				in the JPOX classpath (see <a href="installation.html">JPOX Eclipse Plugin installation</a>) point to the 
				jar files in the latest version of the org.elver.store.jpox.store.runtime plugin.</p>
			</section>
			<section><title>Update manager does not find the upgrade of the EMF - JDO plugin</title>
			<p>Please see the <a href="upgrading.html">upgrade page</a> for more information.</p>
			</section>
			<section><title>The EMF generated editor does not start and the error log gives a sql error 'Missing column....'</title>
			<p>This can occur if your model has changed or you just upgraded the OR Mapper plugin, 
			see the <a href="upgrading.html">upgrade page</a> for more information.</p>
			</section>
			<section><title>Elver does not see my changes in the ecore model</title>
				<p>Elver uses the runtime version of the ecore model. The runtime version is present as java code in the 
				generated EPackage implementation class. This runtime ecore can differ from the ecore file when the 
				model code is not regenerated after a change in the ecore file. So to let Elver use the changes in the ecore
				file the model code needs to be regenerated.</p>
			</section>
		</section>
	</body>
</document>
