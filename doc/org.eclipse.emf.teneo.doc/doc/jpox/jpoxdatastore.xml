<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2005-2006, Elver.org (http://www.elver.org).

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.1 $ $Date: 2006/08/03 09:58:08 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>JpoxDataStore, JpoxHelper, Runtime options</title> 
	</header> 
	<body>
		<section id="JpoxDataStore">
			<title>The JpoxDataStore</title>	
			<p>The JpoxDataStore object controls the persistence of a set of EPackage in a specific relational database. The JpoxDataStore 
			contains a PersistenceManagerFactory and is responsible for creating and updating the database schema.</p>
			<p>A JpoxDataStore is created through the JpoxHelper.INSTANCE.createRegisterDataStore method. After creating a JpoxDataStore
			two methods should be called: setEPackages which set the EPackages handled by this JpoxDataStore and setProperties which
			sets the JPOX database connection information.</p>
			<p>The next important method is the initialize method which configures JPOX, creates the database schema and a 
			PersistenceManagerFactory.</p>
			<p>After the JpoxDataStore is created it can be used to retrieve JDO PersistenceManagers using the getPersistenceManager method.</p>
			<p>The JpoxDataStore can also be used to import and export xml and xmi through the importDataStore and exportDataStore 
			methods.</p>
			<p>The JpoxDataStore has a specific method to retrieve all referers to a passed EObject: getCrossReferencers. The 
			getContainer method will return the container of a specific EObject.</p>
		</section>
		<section id="JpoxHelper">
			<title>The JpoxHelper</title>
			<p>The JpoxHelper is responsible for creating and registering a JpoxDataStore and offers a number of convenience
			methods. To get access to the JpoxHelper functionality you need to use the JpoxHelper.INSTANCE object.
			In addition the JpoxHelper allows you to register a PMFCreator.</p>
		<p>The PMFCreator is called by Elver to create a PersistenceManagerFactory. By registering your 
			own PersistenceManagerFactoryCreator, you can override the creation of persistence managers etc.</p>
		<p>The persistence manager factory creator should implement the interface: 
			org.elver.store.jpox.emf.PersistenceManagerFactoryCreator. The creator can be registered using
			the method JpoxHelper.INSTANCE.setPersistenceManagerFactoryCreator(....).</p>
		</section>
		<section>
			<title>Programmatic generation of package.jdo</title>
			<p>The JpoxHelper.INSTANCE also offers a method (generateMapping(...)) to programmatically generate a package.jdo file for one or
			more epackages. This can be usefull
			in case you encounter issues or need to map multiple epackages. This method allows you also to specify 
			the options which can not be set when using the standard menu option:</p>
			<ul>
					<li>	<strong>PersistenceOptions.SET_ENTITY_AUTOMATICALLY</strong>: if set to "false" then only EClasses which have an
		Entity annotation will be mapped. Default is "true", this means that all EClasses are mapped to the persistent store.</li>
			<li><strong>PersistenceOptions.SQL_CASE_STRATEGY</strong>: controls if the table and column names are uppercased, lowercased or 
			no specific casing is done. The value lowercase will force lower case for all table/column name, the value 
			uppercase will force uppercase for all table/column names, none wil do not casing. It is also possible to set this
			option to the classname of a class implementing the org.elver.store.util.SQLCaseStrategy interface.
			Note this option can only be used when generating the package.jdo programmatically.</li>
			</ul>
			<p>The available options are all present in the <em>org.elver.store.PersistenceOptions</em> class.</p>
		</section>
		<section id="options">
			<title>Runtime Options</title>
			<p>Options are passed to the JpoxDataStore using a Properties object which is set using the JpoxDataStore.setProperties method.</p>
			<p>The options described here are all present in the <em>org.elver.store.PersistenceOptions</em> class. The constant names used 
			in this page all refer to this class.</p>
			<p>Boolean options can have the lower case String values: "false" or "true".</p>
			<ul>
			<li>	<strong>PersistenceOptions.UPDATE_SCHEMA</strong>: if set to "false" then the database schema is not updated 
			when initializing a JpoxDataStore. This improves startup times. Default is "true".</li>
			<li>	<strong>PersistenceOptions.FETCH_CONTAINMENT_EAGERLY</strong>: if set to "true" will set the fetch strategy of all
			containment references to EAGER. This means that containment relations are completely read in memory. Default is "false".</li>
			</ul>
		</section>
	</body>
</document>
