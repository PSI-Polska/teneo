<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.2 $ $Date: 2006/09/13 10:42:36 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Step 5: Using EMF/JPOX Resources</title> 
	</header> 
	<body>
		<p>The EMF Resource concept is very different from a relational/querying approach. In this part of the 
			tutorial it is described how objects can be loaded, updated and saved using the EMF JPOX resource
			implementations (the org.eclipse.emf.teneo.jpox.resource.JPOXResourceDAO.</p>
		<p>For more information on the EMF JPOX resource <a href="../jpoxresources.html">see</a>.</p>
		<section>
			<title>Create a resource</title>
			<p>An EMF resource is retrieved using a specific URL. The protocol of the URI
			is <em>jpox</em>. In addition the URI has to contain the JPOXResourceDAO.DS_NAME_PARAM parameter. 
			This parameter should be set to the name of the JpoxDataStore 
				created through the JpoxHelper.INSTANCE.createRegisterDataStore call. See 
				<a href="tutorial1_2.html">step 2 of this tutorial</a>.</p>
			<source>
String uriStr = "jpox://?" + JPOXResourceDAO.DS_NAME_PARAM + "=MyPMF";
final URI uri = URI.createURI(uriStr);
ResourceSet resourceSet = new ResourceSetImpl();
final Resource res = resourceSet.createResource(uri);
			</source>		
		</section>
		<section>
			<title>Load the resource</title>
			<p>The resource can now be loaded. In this example we also get the contents and iterate throught them.</p>
			<source>
res.load(Collections.EMPTY_MAP);
Iterator it = res.getContents().iterator();
Library libTest;
while (it.hasNext())
{
	libTest = (Library)it.next();
	System.out.println(libTest.getName());
}	
	</source>
			<p><em>The above makes clear that only the Library objects are present as a top level object.</em>
				The other objects can always be reached from the library objects. 
				See <a href="../jpoxresources.html#Standard+load+behavior%3A+Top+level+types">here</a> for a discussion of this characteristic.</p>
		</section>
		<section>
			<title>Update and add</title>
			<p>The following code adds a new library, writer and book.</p>
			<source>
Library libNew = LibraryFactory.eINSTANCE.createLibrary();
libNew.setName("My Second Library");
	
// create a writer
Writer writerNew = LibraryFactory.eINSTANCE.createWriter();
writerNew.setName("I. Asimov");
   
// and one of his books
Book bookNew = LibraryFactory.eINSTANCE.createBook();
bookNew.setAuthor(writerNew);
bookNew.setPages(305);
bookNew.setTitle("Foundation and Empire");
bookNew.setCategory(BookCategory.SCIENCE_FICTION_LITERAL);

// add the writer/book to the library.
libNew.getWriters().add(writerNew);
libNew.getBooks().add(bookNew);
	    	
// Add the top-level object to the resource
res.getContents().add(libNew);	
	</source>
	<p>Because the new library object is added to the resource also its children (the book and writer) are added
	to the resource.</p>
		</section>
		<section>
			<title>Save the resource</title>
			<p>Save the resource. The JPOXResourceDAO handles things like transactions.</p>
			<source>
res.save(Collections.EMPTY_MAP);
			</source>
		</section>
	</body>
</document>
