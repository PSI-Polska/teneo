<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2005-2006, Elver.org (http://www.elver.org).

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.1 $ $Date: 2006/08/03 09:58:09 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Step 4: Example Queries</title> 
	</header> 
	<body>
		<p>Here we show a number of jdoql queries to retrieve information from the relational store. For
		more information on JDOQL queries see <a href="http://www.jpox.org/docs/1_1/query_jdoql.html">here</a>.</p>
		<p>Note that in the examples below the implementation classes are being used.</p>
		<p></p>
		<p>Query to retrieve all books:</p>
		<source>
// reopen the pm/transaction
pm = jpoxDataStore.getPersistenceManager();
tx = pm.currentTransaction();
tx.begin();

// retrieve all books
Query qry = pm.newQuery("SELECT FROM " + BookImpl.class.getName());
Collection coll = (Collection)qry.execute();
System.out.println(((Book)coll.iterator().next()).getTitle()); // show a title
System.out.println(((Book)coll.iterator().next()).getTitle()); // show a title
</source>
		<p></p>
		<p>Query to retrieve all books which have a writer with the name of G. Orwell:</p>
		<source><![CDATA[
// retrieve a book which has a writer with the name of G. Orwell
qry = pm.newQuery("SELECT FROM " + BookImpl.class.getName() + " WHERE " +
		" title==\"1984\" && author == writ && writ.name == \"G. Orwell\" " + 
		"VARIABLES " + WriterImpl.class.getName() + " writ");
coll = (Collection)qry.execute();
System.out.println(coll.size()); // should be 1
Book bk = (Book)coll.iterator().next();
System.out.println(bk.getTitle()); // should be 1984
System.out.println(bk.getAuthor().getName()); // should be G. Orwell
	]]></source>
		<p></p>
		<p>Query to a retrieve a library with a name ending on Library:</p>
		<source>
// read the library with a name ending on Library
qry = pm.newQuery("SELECT FROM " + LibraryImpl.class.getName() + " WHERE name.endsWith(\"Library\")");
coll = (Collection)qry.execute();
lib = (Library)coll.iterator().next();
</source>
		<p>Instead of using the implementation classes directly, it also possible to use the 
		EMF generated interfaces and translate the interfaces to implementation classes. This
		hides the implementation classes. The JpoxHelper
		class offers a convenience method for this task.</p>
		<source><![CDATA[
qry = pm.newQuery("SELECT FROM " + JpoxHelper.INSTANCE.getInstanceClass(Book.class).getName() + " WHERE " +
		" title==\"1984\" && author == writ && writ.name == \"G. Orwell\" " + 
		"VARIABLES " + WriterImpl.class.getName() + " writ");
System.err.println(((Collection)qry.execute()).size());

// retrieving all books
qry = pm.newQuery("SELECT FROM " + JpoxHelper.INSTANCE.getInstanceClass(Book.class).getName());
System.err.println(((Collection)qry.execute()).size());

// retrieving all libraries with a name ending on library
qry = pm.newQuery("SELECT FROM " +  JpoxHelper.INSTANCE.getInstanceClass(Library.class).getName() + 
	" WHERE name.endsWith(\"Library\")");		
System.err.println(((Collection)qry.execute()).size());

// and really close of
tx.commit(); 
pm.close();
	]]></source>
		<p>The next step of this tutorial discusses the use of the EMF Resource concept. </p>
		<p>Please click <a href="tutorial1_5.html">here</a> to go to the next step.</p>
	</body>
</document>
