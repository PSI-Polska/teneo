<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.2 $ $Date: 2006/09/13 10:42:36 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Step 4: Example Queries</title> 
	</header> 
	<body>
		<p>Here we show a number of jdoql queries to retrieve information from the relational store. For
		more information on JDOQL queries see <a href="http://www.jpox.org/docs/1_1/query_jdoql.html">here</a>.</p>
		<p>Note that in the examples below the implementation classes are being used.</p>
		<p></p>
		<p>Query to retrieve all books:</p>
		<source>
// reopen the pm/transaction
pm = jpoxDataStore.getPersistenceManager();
tx = pm.currentTransaction();
tx.begin();

// retrieve all books
Query qry = pm.newQuery("SELECT FROM " + BookImpl.class.getName());
Collection coll = (Collection)qry.execute();
System.out.println(((Book)coll.iterator().next()).getTitle()); // show a title
System.out.println(((Book)coll.iterator().next()).getTitle()); // show a title
</source>
		<p></p>
		<p>Query to retrieve all books which have a writer with the name of G. Orwell:</p>
		<source><![CDATA[
// retrieve a book which has a writer with the name of G. Orwell
qry = pm.newQuery("SELECT FROM " + BookImpl.class.getName() + " WHERE " +
		" title==\"1984\" && author == writ && writ.name == \"G. Orwell\" " + 
		"VARIABLES " + WriterImpl.class.getName() + " writ");
coll = (Collection)qry.execute();
System.out.println(coll.size()); // should be 1
Book bk = (Book)coll.iterator().next();
System.out.println(bk.getTitle()); // should be 1984
System.out.println(bk.getAuthor().getName()); // should be G. Orwell
	]]></source>
		<p></p>
		<p>Query to a retrieve a library with a name ending on Library:</p>
		<source>
// read the library with a name ending on Library
qry = pm.newQuery("SELECT FROM " + LibraryImpl.class.getName() + " WHERE name.endsWith(\"Library\")");
coll = (Collection)qry.execute();
lib = (Library)coll.iterator().next();
</source>
		<p>Instead of using the implementation classes directly, it also possible to use the 
		EMF generated interfaces and translate the interfaces to implementation classes. This
		hides the implementation classes. The JpoxHelper
		class offers a convenience method for this task.</p>
		<source><![CDATA[
qry = pm.newQuery("SELECT FROM " + JpoxHelper.INSTANCE.getInstanceClass(Book.class).getName() + " WHERE " +
		" title==\"1984\" && author == writ && writ.name == \"G. Orwell\" " + 
		"VARIABLES " + WriterImpl.class.getName() + " writ");
System.err.println(((Collection)qry.execute()).size());

// retrieving all books
qry = pm.newQuery("SELECT FROM " + JpoxHelper.INSTANCE.getInstanceClass(Book.class).getName());
System.err.println(((Collection)qry.execute()).size());

// retrieving all libraries with a name ending on library
qry = pm.newQuery("SELECT FROM " +  JpoxHelper.INSTANCE.getInstanceClass(Library.class).getName() + 
	" WHERE name.endsWith(\"Library\")");		
System.err.println(((Collection)qry.execute()).size());

// and really close of
tx.commit(); 
pm.close();
	]]></source>
		<p>The next step of this tutorial discusses the use of the EMF Resource concept. </p>
		<p>Please click <a href="tutorial1_5.html">here</a> to go to the next step.</p>
	</body>
</document>
