<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.2 $ $Date: 2006/09/13 10:42:36 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Step 1: Generate jdo, enhance classes</title> 
		<abstract>The first step in the tutorial is to setup the environment</abstract>
	</header> 
	<body>
		<section>
			<title>Enable JPOX Support</title>
			<p>This tutorial assumes that the JPOX Eclipse pluging has been installed. Perform the following
			steps to enable JPOX support (see the image below): </p>
			<ol>
				<li>Add JPOX support: right click on the library project and in the JPOX menu choose <em>Add JPOX Support</em></li>
				<li>Enable Auto Enhancement: this automatically enhances your classes after each Eclipse build,
					right click on the library project and in the JPOX menu check <em>Enable Auto-Enhancement</em></li>
			</ol>
			<figure src="images/add_jpox.gif" alt="Enabling JPOX support for the library project"/>
		</section>
		<section>
			<title>Add runtime plugin to dependencies of plugin.xml</title>
			<p>To enable the runtime layer the org.eclipse.emf.teneo.jpox plugin needs to be added to the
				plugin dependencies of the plugin.xml (see image below).</p>
			<p>In addition your database JDBC driver should be added to classpath of the plugin.</p>
			<figure src="images/plugindependency.gif" alt="Setting dependency of plugin.xml"/>
			<p><strong>The runtime plugin needs to be specified in the plugin dependencies before the OR mapping can be generated.</strong></p>
		</section> 
		<section>
			<title>Generate OR Mapping</title>
			<p>To generate the OR mapping right click on the ecore file and select the option 
				<em>Generate EMF - JDO/JPOX OR Mapping</em> in the Teneo submenu (the exact label of this 
				menu option may vary depending on the Teneo release you use). The generation takes
				only a second, the package.jdo file should be created in the same folder as the ecore file. <em>It is possible
				that the folder needs to be refreshed manually.</em></p>
			<p>Next copy the created package.jdo file to a location in the source tree and build the project (if it is not done automatically).</p>
			<p>Note:</p>
			<ul>
				<li>The OR Mapper searches for the EPackage classes in your project and uses the classpath of the project of
				the ecore file.</li>
				<li>The only requirement is that your EPackage classes (the interface) extend the emf EPackage interface directly.</li>
				<li>If there was already a package jdo file at the location, then the old version is copied to package.jdo_old</li>
				<li>The JPOX enhancer automatically enhances your class files if you have automatic build on, see the console view for the output of the
					enhancer</li>
			</ul>
			<p></p>
			<p></p>
			<figure src="../images/elver_menu.gif" alt="Generating or mapping"/>
			<p></p>
			<p>The or mapping can also be generated programmatically, see <a href="../jpoxdatastore.html#Programmatic+generation+of+package.jdo">here</a>.</p>
		</section>
		<section>
			<title>Create Empty Database</title>
			<p>The runtime layer will automatically create tables and foreign constraints. However it will not
			automatically create a database. For this tutorial you need to manually create an empty
				database in your database server, the database should have the name: <em>mylibrary</em>.</p>
		</section>
		<section>
			<title>Add Logging</title>
			<p>To view the log messages of JPOX and the integration layer you have to set the log4j properties. A
			simple sample log4j.properties file can be downloaded <a href="../download/log4j.properties">here</a>.
			The log4j.properties file has to be placed directly in the src folder of the library model project.</p>
			<p></p>
			<p>Please click <a href="tutorial1_2.html">here</a> to go to the next step to create a library object and store it.</p>
		</section>
	</body>
</document>
