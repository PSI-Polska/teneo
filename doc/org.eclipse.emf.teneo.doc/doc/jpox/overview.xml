<?xml version="1.0"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
-->
<document> 
  <header> 
    <title>EMF - JPOX Integration Overview</title> 
    <notice>Describes the different components of the solution</notice>
    <abstract>
    </abstract> 
  </header> 
  <body>
	  <p>
	  The EMF - JPOX Persistency solution consists of two tools:</p>
	<ol>
		<li>EMF - JPOX OR Mapper: generates object-relational mapping files from the tags in 
the EMF-generated source code. </li>
	 <li>EMF - JPOX Runtime: takes care of handling EMF specific 
things such as EMF collections, containment and bi-directional relations.</li>
	</ol>
		  <p>These tools are used in the development process in the following way:</p>
	<section>
		<title>Generate OR Mapping file</title>		
	  <p>
	  After the java sources have been generated from the ecore model, the next step is to generate the <em>package.jdo</em> file. The package.jdo file describes
	  for a object relational mapping tool how to persist java objects to relational tables. 
		</p>
	 <p>The <em>EMF - JPOX OR Mapper Tool</em> performs this task.
	  </p>
	</section>
	<section>
		<title>Class Enhancement</title>		
	  <p>
	  In a jdo 2.0 scenario java classes are enhanced on the basis of the <em>package.jdo</em> file.  The enhancement uses byte-code enhancement tools 
		  to adapt compiled java classes. During the enhancement action, persistent related
		  interfaces and functionality are added to the java classes. 
		</p>
		<p><a href="http://www.jpox.org/docs/download.html">JPOX</a> delivers an Eclipse plugin which can be used
		to automatically enhance the java classes after each Eclipse build.
	  </p>
	</section>
	<section>
		<title>Runtime Layer</title>
  <p>
	  The java classes have been enhanced and ready to be persisted. EMF objects require specific handling in relation to
	  jpox. This is mainly related to the way EMF handles references and collections. Also the EMF resource approach
	  requires specific jpox implementations. To handle the EMF specifics, the <em>EMF - JPOX runtime
	  layer</em> was developed. This layer is very small (about 50kb) but is essential to get a working EMF - JPOX integration.
	</p>
		<p>The main visible component of the runtime layer is the <a href="jpoxdatastore.html">JpoxDataStore</a>. 
		The <a href="jpoxdatastore.html">JpoxDataStore</a> 
		controls a PersistenceManagerFactory and a set of EPackages which are persisted using the PersistenceManagers
		of this PersistenceManagerFactory. When using a PersistenceManager, 
		behind the scenes Teneo takes care of instantiating EMF objects and setting/getting EFeatures from the database. 
		Teneo also handles lazy loading of ELists.</p>
		<p><figure src="images/Runtime.jpg" alt="Teneo Runtime Layer"/></p>
	</section>
	<section id="ejb3">
		<title>EJB3 Annotations</title>		
		<p>Teneo can automatically map the EMF model to an object relational representation. However there are situations in which it makes
		sense to influence or control the mapping. For this purpose Teneo supports EJB3-like annotations in the model. The annotations 
		can be used to control the way the inheritance structure is mapped to the relational store or how efeatures are mapped to database 
		columns. For a complete overview of the supported EJB3 annotations see <a href="ejb3_features.html">here</a>.</p>
		<p>The EJB3 support has been developed in such a way that it is only required to specify annotations for those parts of the model for 
		which the automatic behavior does not result in the required behavior. For example it is possible to specify a column annotation for 
		one efeature in a model while all other efeatures and eclasses are automatically handled by Teneo.</p>
		<p><em>EJB3 annotations are defined in EAnnotations in a specific format. See 
		<a href="ejb3_format.html">here</a> for more information.</em></p>
	</section>
  </body> 
</document>