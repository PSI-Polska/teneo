<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2005-2006, Elver.org (http://www.elver.org).

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.1 $ $Date: 2006/08/03 09:58:07 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Quick Start</title> 
	</header> 
	<body>
		<p>
			This quick start describes in a few short steps how to setup, initialize and use the runtime layer.
			It uses the well-known EMF Library example. It does not go as far as the Library Tutorial but gives a quick idea on how to get up-and running.
		</p>
		<p>The source code of this quick start can be downloaded here: <a href="samples/QuickStart.java">QuickStart.java</a>.</p>
		<p>
			It is assumed that you have done one of the EMF Library tutorials (see 
			<a href="http://eclipse.org/emf/docs.php?doc=tutorials/xlibmod/xlibmod.html">here</a> or 
			 <a href="http://eclipse.org/emf/docs.php?doc=tutorials/clibmod/clibmod.html">here</a>)
		</p>
		<p>The quick start consists of the following steps:</p>
			<ol>
				<li>Set Library model plugin dependency:
				<ul>
					<li>Add the EMF persistency runtime plugin (org.elver.store.hibernate.runtime) to the plugin dependencies of the Library (model) project.
					Note enable reexport depencency for the plugin (right-click on entered dependency to find this option)</li>
					<li>Add <em>Eclipse-RegisterBuddy: org.elver.store.hibernate.runtime</em> to the Manifest.MF of
					the Library model project (see <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=87775#c57">here</a> why).</li>
					<li>Add a jdbc driver to the model project.</li>
				</ul>
				</li>
				<li>Create an empty database (with the name library) in your database server</li>
				<li>Create a new class in the org.eclipse.example.library package with a static main method</li>
				<li>Initialize the runtime layer and create a HbDataStore: add the following to the main method. <em>Replace the 
				database connection information here with your own information.</em>:
					<source>
// the name of the datastore
String hbName = "MySF"; 

// the name of the database, this database should exist but does not need to contain tables
String dbName = "library"; 

// Set the database information, Environment is org.hibernate.cfg.Environment
final Properties props = new Properties();
props.setProperty(Environment.DRIVER, "com.mysql.jdbc.Driver");
props.setProperty(Environment.USER, "root");
props.setProperty(Environment.URL, "jdbc:mysql://127.0.0.1:3306/" + dbName);
props.setProperty(Environment.PASS, "root");
props.setProperty(Environment.DIALECT, org.hibernate.dialect.MySQLInnoDBDialect.class.getName());

// create the HbDataStore
HbDataStore hbds = HbHelper.INSTANCE.createRegisterDataStore(hbName);

// sets its epackages stored in this datastore
hbds.setEPackages(new EPackage[]{LibraryPackage.eINSTANCE});

// set the relational database to use and other properties
// to set Elver specific options call hbds.setPersistenceProperties
hbds.setHibernateProperties(props);

// initialize, also creates the database tables
hbds.initialize();
					</source>
					</li>
				<li>Create a Hibernate session and a transaction:
			<source>
// Create a session and a transaction
Session session = hbds.getSession();
Transaction tx = session.getTransaction();
    	</source></li>
			<li>Begin a transaction, create a library and make it persistent
	<source>
// start a transaction, create a library and make it persistent
tx.begin();
Library lib = LibraryFactory.eINSTANCE.createLibrary();
lib.setName("My Library");
session.save(lib);
	</source></li>
			<li>Create a writer and book, add to the library and commit
		<source>
// create a writer
Writer writer = LibraryFactory.eINSTANCE.createWriter();
writer.setName("JRR Tolkien");
	       
// and one of his books
Book book = LibraryFactory.eINSTANCE.createBook();
book.setAuthor(writer);
book.setPages(305);
book.setTitle("The Hobbit");
book.setCategory(BookCategory.SCIENCE_FICTION_LITERAL);
	
// add the writer/book to the library. The writer and book are automatically
// made persistent because they are added to the library which is already
// made persistent
lib.getWriters().add(writer);
lib.getBooks().add(book);
	        
// at commit the objects will be present in the database
tx.commit();
// and close of 
session.close();
		</source></li>
			</ol>
	</body>
</document>
