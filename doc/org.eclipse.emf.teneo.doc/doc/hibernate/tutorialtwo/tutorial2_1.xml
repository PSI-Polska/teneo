<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
--> 

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.2 $ $Date: 2006/09/13 10:42:36 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Initialize the Library Editor</title> 
	</header> 
	<body>
		<section>
			<title>Set dependencies of EMF model and editor plugins</title>
			<p>The EMF persistency plugin (org.eclipse.emf.teneo.hibernate) has to be added 
			to the dependencies tab of the plugin of the Library model project. Check 'reexport this dependency'.</p>
		</section>
		<section>
			<title>Initialization</title>
			<p>To initialize the EMF  layer the following code has to be added to static inner
				class <em>Implementation</em> in the <em>LibraryEditorPlugin</em> class.</p>
			<source>
public void start(BundleContext context) throws Exception 
{
	org.eclipse.osgi.framework.debug.Debug.DEBUG_GENERAL = true;
	
	// Set the database information, Environment is org.hibernate.cfg.Environment
	final Properties props = new Properties();
	props.setProperty(Environment.DRIVER, "com.mysql.jdbc.Driver");
	props.setProperty(Environment.USER, "root");
	props.setProperty(Environment.URL, "jdbc:mysql://127.0.0.1:3306/library");
	props.setProperty(Environment.PASS, "root");
	props.setProperty(Environment.DIALECT, org.hibernate.dialect.MySQLInnoDBDialect.class.getName());

	// Initialize create the HbDataStore
	HbDataStore hbds = HbHelper.INSTANCE.createRegisterDataStore("library");
	hbds.setEPackages(new EPackage[]{LibraryPackage.eINSTANCE});
	hbds.setHibernateProperties(props);
	hbds.initialize();
	
	// this is required to force the editor to retrieve the correct resource
	Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("library", new HibernateResourceFactory())
	
	super.start(context);
}
	</source>
			<p>Remarks:</p>
			<ul>
			<li>The database properties have to be changed to contain your own database connection 
			information.</li>
			<li>The above source code uses the database library. This database has to exist (but can be empty).</li>
			<li><strong>The name of the datastore is chosen on purpose. The extension of the resource name (library in this case)
			is used to find the datastore, so therefore here the name library is chosen.</strong></li>
			</ul>
		</section>
		<section>
			<title>Resource Factory setting</title>
			<p>For this tutorial an Hibernate EMF resource factory has to be specified. This is done
				by setting the library element of the org.eclipse.emf.ecore.extension_parser extension
				point to: org.eclipse.emf.teneo.hibernate.resource.HibernateResourceFactory.</p>
			<p>
			<img src="../images/resourcefactory.jpg" alt="Enabling Hibernate support for the library project"/>
			</p>				
		</section>
		<section>
			<title>Create valid EMF Objects</title>
			<p>The standard generated EMF Library example creates invalid objects. For example when you run the editor
			you can save a Library object with an empty name while this is a required element. 
			Hibernate is more precise and will not allow this.</p>
			<p>To prevent this add the following code in the performFinish method of the LibraryModelWizard
			class in the library editor project. This has to be added around line 220 after the rootObject variable has been set:</p>
			<source>
if (rootObject instanceof Library)
{
	((Library)rootObject).setName("My Library");
}
else if (rootObject instanceof Book)
{
	((Book)rootObject).setTitle("My Title");
}
else if (rootObject instanceof Writer)
{
	((Writer)rootObject).setName("My Name");
}
</source>
			<p></p>
			<p></p>
			<p>Please click <a href="tutorial2_2.html">here</a> to go to the next step.</p>
		</section>
	</body>
</document>
