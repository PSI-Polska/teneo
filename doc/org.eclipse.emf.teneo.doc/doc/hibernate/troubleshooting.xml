<?xml version="1.0"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
-->
<document> 
	<header> 
		<title>Troubleshooting</title> 
	</header> 
	<body>
		<br/>
		<p><em>For troubleshooting please also visit <strong>the EMFT open issues list <a href="https://bugs.eclipse.org/bugs/buglist.cgi?product=EMFT&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;query_format=advanced&amp;order=map_components.name">here</a>.</strong></em></p>
		<section id="runtime">
			<title>Troubleshooting the Mapping and Runtime layer/Hibernate</title>
			<p>The runtime layer uses commons-logging for logging. <a href="samples/log4j.properties">Here</a> 
				you can find an example log4j.properties file. This file should be placed directly in
				the src directory of your EMF Model project.</p>
			<p>The example <a href="samples/log4j.properties">log4j.properties</a> also contains log4j settings
				for Hibernate.</p>
			<p>If you use the runtime layer within a plugin then log messages will not appear in the console. In this 
				case check the error log view (<em>Window > Show View > Error Log</em>) or let the log messages be
				written to a file.
			</p>
		</section>
		<section id="ormapper">
			<title>Troubleshooting the automatic in-memory mapping</title>
			<p>The mapping is generated in memory. To view the mapping created by Teneo please call the method 
			getMappingXML on the HbDataStore. The returned String contains the Hibernate mapping.</p>
		</section>
		<section id="manualormapper">
			<title>Troubleshooting the OR Mapper Menu Option</title>
			<p>If an error popup is shown or no popup box appears after the OR Mapper plugin is finished then an application
			error has occured within the OR Mapper.</p>
			<p>The OR Mapper menu option only works if the ecore file is located in the same Java Project as the generated
			EPackage sources.</p>
			<p>When the console shows this exception: <em>Exception in thread "main" java.lang.NoClassDefFoundError: org/eclipse/emf/teneo/hibernate/mapper/GenerateHBM</em>
			then you have not added the org.eclipse.emf.teneo.hibernate plugin to the dependencies of the model plugin.</p>
			<p>
			To analyze what the problem is first view the error log. The error log
			can be opened through: <em>Window > Show View > Error Log</em>. By doubleclicking on the lines in
			the error log you can get more information.</p>
			<p>More information is present in the log file generated by the Teneo plugins. The log 
			file can be found in the .metadata/.plugins/org.eclipse.emf.teneo.jpox.eclipse or .metadata/.plugins/org.eclipse.emf.teneo.eclipse subdirectory in the Eclipse workspace directory (note
			the dots before metadata and plugins).</p>
			<p>More information is present in the log file generated by the Teneo plugins. The log 
			file can be found in the .metadata/.plugins/org.eclipse.emf.teneo.hibernate.eclipse or .metadata/.plugins/org.eclipse.emf.teneo.eclipse subdirectory in the Eclipse workspace directory (note
			the dots before metadata and plugins).</p>
			<p>When mailing a question regarding these type of errors please also post the logfile.
			Logfiles are automatically copied to a backup if 250kb has been reached, only one backup file is maintained.</p>
		</section>
		<section id="resourceplanning">
			<title>Troubleshooting the Resource Utilities</title>
			<p>If an error popup is shown then an application
			error has occured within the resource utility.</p>
			<p>
			To analyze what the problem is first view the error log. The error log
			can be opened through: <em>Window > Show View > Error Log</em>. By doubleclicking on the lines in
			the error log you can get more information.
			</p>
			<p>More information is present in the log file generated by the Teneo plugins. The log 
			file can be found in the .metadata/.plugins/org.eclipse.emf.teneo.hibernate.eclipse or .metadata/.plugins/org.eclipse.emf.teneo.eclipse subdirectory in the Eclipse workspace directory (note
			the dots before metadata and plugins).</p>
			<p>When mailing a question regarding these type of errors please also post the logfile.
			Logfiles are automatically copied to a backup if 250kb has been reached, only one backup file is maintained.</p>
		</section>
		<section><title>More debug information from Eclipse</title>
			<p><em>As an extra debug enabling you can add the following line in the EMF editor plugin:</em></p>
			<source>
org.eclipse.osgi.framework.debug.Debug.DEBUG_GENERAL = true;
			</source>
			<p>This will result in much more debugging information in the console.</p>
		</section>
		<section><title>Cut and Paste does not work in the Editor</title>
		<p>Please look <a href="hibernate_details.html#cutpaste">here</a></p>
		</section>
			<section><title>Column name e_version not supported by database</title>
			<p>Teneo will automatically add a version column to the database for each object. The default version column name
			is e_version. However not all databases support an _ in the column name. To set the version column name you can set 
			an option as explained <a href="options.html">here</a>.</p>
			</section>
			<section><title>Column names too long</title>
			<p>Teneo creates foreign key column names by concatenating the name of the (e)class and the property name. The result can be
			a column name which is too long for certain databases. You can control the maximum column name length by setting the 
			relevant runtime option, see <a href="options.html">here</a>.</p>
			</section>
			<section><title>org.hibernate.DuplicateMappingException: Duplicate class/entitymapping</title>
			<p>This exception occurs when two EClasses (of different EPackages) have the same name. To solve this you need to
			direct Teneo to use qualified EClass names, see <a href="options.html">here</a>. Note that when using qualified 
			EClass names that also HQL needs to use the qualified EClass names. The EClass names are qualified by prepending
			the nsprefix of the EPackage with a dot (.) as a separator.</p>
			</section>
			<section><title>Created new model through new model wizard: diagnostic error</title>
			<p>The generated EMF model wizard allows invalid documents. When going through the 
			wizard you need to select a type to create as the first document in the resource. The 
			EMF model wizard creates an empty (all members are null) instance of this type and adds
				 it to the Hibernate resource. Before the Hibernate resource is 
			saved it checks if the content of the resource is valid. When nullable-constraints
				are violated a StoreValidationException (with Diagnostics) is thrown.</p>
			<p>To solve this you should make your model more relaxed (make elements nullable) or
				add a small amount of code, which sets the non-nullable fields, to the model wizard. An example of this last solution
				is illustrated in the Library Tutorial. 
			</p>
			</section>
			<section>
				<title>java.lang.NoClassDefFoundError when starting/initializing runtime layer</title>
				<p>When your model is divided over different projects/plugins then the dependency on
				org.eclipse.emf.teneo.hibernate has to be set in the project with the 'widest' classpath (the project with a classpath containing the other plugins).
				For example if you have the following two emf projects:</p>
				<ul><li>Core</li><li>Specific (which uses/imports Core)</li></ul>
				<p>Then the dependency should preferably be in the META-INF of the 'Specific' project. This is required 
				otherwise Hibernate will not see the 'Specific' project.</p>
			</section>
			<section><title>No class def found: org.hibernate.proxy.ProxyFactory</title>
			<p>This exception can occur when your classes have been enhanced by JPOX and you
			try to persist them via hibernate. Another reason can be that the name you used
			to register the SessionFactory does not correspond to the expected extension
			(e.g. library). 
			</p>
			</section>
			<section><title>Could not determine type for: org.eclipse.emf.common.util.AbstractEnumerator, for columns: [org.hibernate.mapping.Column(enu)]</title>
			<p>This exception can occur when you have a enumerate object type in your model. An enumerate object type differs from a
			standard enumerate because it has a nillable="true" attribute on the element, for example:</p>
			<source><![CDATA[
<element name="enu" type="this:SimpleEnum" nillable="true"/>

<simpleType name="SimpleEnum">
	<restriction base="xsd:NCName">
		<enumeration value="Enum1"/>
		<enumeration value="Enum2"/>
	</restriction>
</simpleType>
			]]></source>
			<p>As a workaround add an Enumerated annotation (see ejb3 annotations on this site) to the element.</p>
			</section>
			<section>
				<title>The resource is empty in the generated editor</title>
				<p>See the <a href="knownissues.html">Known Issues</a>.</p>
			</section>
			<section><title>Update manager does not find the upgrade of the EMF Hibernate plugin</title>
			<p>As a workaround use find new features to install a new version of the EMF Hibernate plugin.</p>
			</section>
			<section><title>Editor does not start,  the error log gives a sql error 'Missing column....'</title>
			<p>This can occur if your model has changed or you just upgraded the OR Mapper plugin and have generated a new 
				hibernate.hbm.xml file. Before upgrading it is best
				to export the current database using the <a href="resource_utility.xml">Resource Utility</a>. After exporting start
			with a new database.</p>
			</section>
			<section><title>Editor does not start, ClassNotFoundException on the Editor Plugin</title>
			<p>This can happen when the Hibernate libraries can not find the model classes. You can check if
			you have set the BuddyPolicy in the Manifest.MF of the plugin containing the Hibernate jar files.
			If not add the following to the Manifest.MF of the plugin containing the Hibernate jar files:
			Eclipse-BuddyPolicy: dependent</p>
			</section>
			<section><title>Editor does not start, AssertionFailedException</title>
			<p>When you start the editor you get the following exteption (stacktrace truncated):</p>
			<source>
org.eclipse.core.runtime.AssertionFailedException: assertion failed: 
at org.eclipse.core.runtime.Assert.isTrue(Assert.java:109)
at org.eclipse.core.runtime.Assert.isTrue(Assert.java:95)
at org.eclipse.ui.part.MultiPageEditorPart.setActivePage(MultiPageEditorPart.java:688)
at org.eclipse.ui.part.MultiPageEditorPart.createPartControl(MultiPageEditorPart.java:280)			
			</source>
			<p>You probably started the editor with an empty database, the editor does not support this.
			You should have at least one root object in the database (for example a Library object in 
			the Library tutorial).</p>
			</section>
			<section>
				<title>Validation exception on enumerate properties when saving the editor content</title>
				<p>Symptom: a validation error is thrown (see the console) that certain enumerate fields have not been
					set.</p>
				<p>Cause: the EMF validator incorrectly enforces that the value of an enumerate field
					should not be the same as the default value.</p>
				<p>Solution: is an EMF issue which has been solved 
					(<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=104723">see here</a>). Upgrading EMF to a 2.2 or a 
					later 2.1 release solves this.</p>
			</section>
			<section><title>Stacktraces when starting Eclipse with already open EMF editor</title>
				<p>Symptom: This occurs when keeping an EMF generated editor open when closing eclipse and
				then starting eclipse again. When starting Eclipse again you see many stack traces in the console
					with messages like: class not found exception: org/hibernate/proxy/proxy.</p>
				<p>Consequence: The editor will open correctly and can be used. The only 'consequence' is that the
					data is not lazily loaded.</p>
				<p>Solution: A solution has been implemented in release 0.2.0.1.</p>
			</section>
			<section><title>Teneo does not see my changes in the ecore model</title>
				<p>Teneo uses the runtime version of the ecore model. The runtime version is present as java code in the 
				generated EPackage implementation class. This runtime ecore can differ from the ecore file when the 
				model code is not regenerated after a change in the ecore file. To let Teneo use the changes in the ecore
				file the model code needs to be regenerated.</p>
			</section>
	</body>
</document>
