<?xml version="1.0"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
-->
<document> 
	<header> 
		<title>Overview</title> 
	</header> 
	<body>
		<section id="overview">
			<title>Overview</title>
			<p>The EMF - Hibernate integration consists of two main parts:</p>
			<ol>
			<li><strong>Mapping</strong>: the mapping layer is responsible for the automatic mapping of an EMF model to an in-memory Hibernate mapping. The 
			mapping logic can be influenced by EJB3-like annotations in the model.</li>
			<li><strong>Runtime</strong>: the runtime layer takes care of handling specific EMF features such as lazy loading of ELists, 
			setting EFeatures from the database, instantiating EObjects using the EClass name, etc. </li>
			</ol>
		</section>
		<section id="mapping">
			<title>Teneo Mapping Overview</title>
			<p>The image below illustrates the basic process from a set of EPackages or an ecore file to the Teneo runtime. The starting point
			is the EMF model represented by one or more EPackages. These EPackages can contain EJB3-like annotations.</p>
			<p><figure src="images/Process2.jpg" alt="Teneo Mapping Process"/></p>
			<p>The application starts up and registers the EPackages in Teneo. The registered EPackages (and their EAnnotations) 
			are translated to an in-memory 
			annotated model. This annotated model initially only contains the annotations which have been specified manually as EAnnotations
			in the original model.
			</p>
			<p>In the next step Teneo automatically adds annotations to map the EMF model to an or representation. The manually entered EAnnotations
			are retained and not overwritten.
			</p>
			<p>The model is now fully annotated and translated into an in-memory hibernate.hbm.xml String. This Hibernate mapping is then used
			to configure a <a href="hbdatastore.html">HbDataStore</a>.</p>
		</section>
		<section>
			<title>Runtime Layer</title>
			<p>The main visible component of the runtime layer is the <a href="hbdatastore.html">HbDataStore</a>. The <a href="hbdatastore.html">HbDataStore</a> 
			controls a SessionFactory and a set of EPackages which are persisted using the sessions of this session factory. When using a Hibernate session, 
			behind the scenes Teneo takes care of instantiating EMF objects and setting/getting EFeatures from the database. 
			Teneo also handles lazy loading of ELists.</p>
			<p><figure src="images/Runtime.jpg" alt="Teneo Runtime Layer"/></p>
		</section>
		<section id="ejb3">
			<title>EJB3 Annotations</title>		
			<p>Teneo can automatically map the EMF model to an object relational representation. However there are situations in which it makes
			sense to influence or control the mapping. For this purpose Teneo supports EJB3-like annotations in the model. The annotations 
			can be used to control the way the inheritance structure is mapped to the relational store or how efeatures are mapped to database 
			columns. For a complete overview of the supported EJB3 annotations see <a href="ejb3_features.html">here</a>.</p>
			<p>The EJB3 support has been developed in such a way that it is only required to specify annotations for those parts of the model for 
			which the automatic behavior does not result in the required behavior. For example it is possible to specify a column annotation for 
			one efeature in a model while all other efeatures and eclasses are automatically handled by Teneo.</p>
			<p><em>EJB3 annotations are defined in EAnnotations in a specific format. See 
			<a href="ejb3_format.html">here</a> for more information.</em></p>
		</section>
	</body>
</document>
