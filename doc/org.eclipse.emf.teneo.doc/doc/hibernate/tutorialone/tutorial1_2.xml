<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.2 $ $Date: 2006/09/13 10:42:35 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Step 2: Create and store EMF Objects</title> 
	</header> 
	<body>
		<p>
			The complete code for this tutorial can be found here: <a href="../samples/Tutorial1.java">Tutorial1.java</a>.
		</p>
		<section>
			<title>Hibernate database configuration</title>
			<p>To let Hibernate access your database, you must specify the JDBC driver, database URL, username/password and the
				database-specific dialect to use. These settings are specified using the standard Properties mechanism.</p>
			<p>Teneo allows you to configure Hibernate in two ways: </p>
			<ul>
				<li>Automatically: by placing the properties in the file "hibernate.properties" in a root directory of the classpath. We
					use this method in this tutorial.</li>
				<li>Programmatically: by creating a Properties instance and using HbDataStore.setHibernateProperties().</li>
			</ul>
			<p>A sample hibernate.properties file is shown below:</p>
<source>hibernate.connection.driver_class=org.hsqldb.jdbcDriver
hibernate.connection.url=jdbc:hsqldb:hsql://127.0.0.1/library
hibernate.connection.username=sa
hibernate.connection.password= hibernate.dialect=org.hibernate.dialect.HSQLDialect
</source>
			<p> Example hibernate.properties: </p>
			<ul>
				<li>
					<a href="mysql/hibernate.properties">hibernate.properties</a> for
					<a href="http://www.mysql.com/">MySQL</a></li>
				<li>
					<a href="hsqldb/hibernate.properties">hibernate.properties</a> for
					<a href="http://www.hsqldb.org/">HSQLDB</a></li>
			</ul>
			<p>Note that Hibernate has many more configuration properties. For more information see the
				<a href="http://www.hibernate.org/hib_docs/v3/reference/en/html/session-configuration.html">Hibernate
					reference documentation</a>.</p>
		</section>
		
		<section>
			<title>Initialize runtime layer</title>
		<p>Create and initialize the runtime Hibernate EMF layer as follows:</p>
		<source>
// Create the DataStore.
final String dataStoreName = "LibraryDataStore";
final HbDataStore dataStore = HbHelper.INSTANCE.createRegisterDataStore(dataStoreName);

// Configure the EPackages used by this DataStore.
dataStore.setEPackages(new EPackage[] { LibraryPackage.eINSTANCE });

// Initialize the DataStore. This sets up the Hibernate mapping and
// creates the corresponding tables in the database.
dataStore.initialize();</source>
		</section>
				
		<section>
			<title>Obtain a SessionFactory and start a Transaction.</title>
			<p>The SessionFactory, Session and Transaction are the familiar Hibernate entry points:</p>
			<source>
final SessionFactory sessionFactory = dataStore.getSessionFactory();

// Open a new Session and start Transaction.
Session session = sessionFactory.openSession();
session.beginTransaction();</source>
</section>
		<section>
			<title>Create and populate Library</title>
	<source>
// Create a Library.
Library library = LibraryFactory.eINSTANCE.createLibrary();
library.setName("My Library");
// Make it persistent.
session.save(library);
		
// Create a writer...
Writer writer = LibraryFactory.eINSTANCE.createWriter();
writer.setName("JRR Tolkien");

// ...and one of his books.
Book book = LibraryFactory.eINSTANCE.createBook();
book.setAuthor(writer);
book.setPages(305);
book.setTitle("The Hobbit");
book.setCategory(BookCategory.SCIENCE_FICTION_LITERAL);

// Add the Writer and Book to the Library. They are made
// persistent automatically because the Library is itself
// already persistent.
library.getWriters().add(writer);
library.getBooks().add(book);</source>
	</section>
		
	<section>
		<title>Commit Transaction and close Session</title>
		<p>The Library is not stored in the database until you commit the Transaction:</p>
		<source>session.getTransaction().commit();
session.close();</source>
	</section>
		
	<section>
		<title>Next Step</title>
		<p>In the next step of this tutorial we retrieve the Library from the database and add a new Book and Writer.</p>
		<p><a href="tutorial1_3.html">Click here</a> to go to the next step.</p>
	</section>	
	</body>
</document>
