<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2005, 2006 Springsite BV (The Netherlands) and others
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.2 $ $Date: 2006/09/13 16:05:49 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Supported JPA Annotation Features</title> 
	</header> 
	<body>
		<section id="featuresejb3">
			<title>JPA Annotation Features</title>
			<p>The goal is to support all JPA persistence annotations.</p>
			<p>You can download the EJB 3.0 Persistence Specification from the
				<a href="http://jcp.org/aboutJava/communityprocess/final/jsr220/index.html">jsr-220 download page</a>. The
				relevant document is &quot;ejb-3_0-fr-spec-persistence.pdf&quot;.</p>
			<p>The numbers in the listings below refer to the sections in chapter 9 of the specification.</p>
		</section>
		<section>
			<title>Supported JPA Annotations</title>
			<p>The JPA annotations listed below are supported as of the current release. &quot;Supported&quot; means that there are test
				cases showing the annotation is correctly translated to an object-relational mapping and that the annotation works as
				expected when persisting and retrieving objects to/from a database.</p>
			<p>Supported as of the current release:</p>
				<ul>
				<li>9.1.1 Table Annotation</li>
				<li>9.1.2: SecondaryTable Annotation</li>
				<li>9.1.3: SecondaryTables Annotation</li>
				<li>9.1.4: UniqueConstraint Annotation</li>
				<li>9.1.5: Column Annotation</li>
				<li>9.1.6: JoinColumn Annotation</li>
				<li>9.1.7: JoinColumns Annotation</li>
				<li>9.1.8: Id Annotation</li>
				<li>9.1.9: GeneratedValue Annotation</li>
				<li>9.1.10: AttributeOverride Annotation</li>
				<li>9.1.11: AttributeOverrides Annotation</li>
				<li>9.1.12: AssociationOverride Annotation</li>
				<li>9.1.13: AssociationOverrides Annotation</li>
				<li>9.1.14: EmbeddedId Annotation</li>
				<li>9.1.15: IdClass Annotation</li>
				<li>9.1.16: Transient Annotation</li>
				<li>9.1.17: Version Annotation</li>
				<li>9.1.18: Basic Annotation</li>
				<li>9.1.19: Lob Annotation</li>
				<li>9.1.20: Temporal Annotation (no special support required, handled automatically)</li>
				<li>9.1.21: Enumerated Annotation (the Enumerate class must have a get(int) and get(String) method which returns an instance of the Enumerate class)</li>
				<li>9.1.22: ManyToOne Annotation</li>
				<li>9.1.23: OneToOne Annotation</li>
				<li>9.1.24: OneToMany Annotation</li>
				<li>9.1.25: JoinTable Annotation</li>
				<li>9.1.26: ManyToMany Annotation</li>
				<li>9.1.28: OrderBy Annotation</li>
				<li>9.1.29: Inheritance Annotation</li>
				<li>9.1.30: DiscriminatorColumn Annotation</li>
				<li>9.1.31: Discriminator Annotation</li>
				<li>9.1.32: PrimaryKeyJoinColumn Annotation</li>
				<li>9.1.33: PrimaryKeyJoinColumns Annotation</li>
				<li>9.1.34: Embeddable Annotation</li>
				<li>9.1.35: Embedded Annotation</li>
				<li>9.1.36: MappedSuperclass Annotation</li>
				<li>9.1.37: SequenceGenerator Annotation</li>
				<li>9.1.38: TableGenerator Annotation</li>
				</ul>
			</section>
			<section>
				<title>Currently Unsupported JPA Annotations</title>
				<p>The following annotations are not yet supported:</p>
				<ul>
				<li>9.1.27: MapKey Annotation</li>
				</ul>
		</section>
		<section id="hbspecific">
			<title>Hibernate Annotations Extensions</title>
			<p>In addition to the JPA annotations, Teneo supports a number of 
			<a href="http://www.hibernate.org/5.html#A7">Hibernate Annotations Extensions</a>.</p>
			<p>The following Hibernate specific annotations are supported:</p>
			<ul>
				<li>Columns</li>
				<li>GenericGenerator</li>
				<li>IdBag</li>
				<li>Type</li>
			</ul>
			<p>In future releases the support for hibernate specific annotations will be extended.</p>
		</section>
		<section>
			<title>Annotation notes</title>
			<section id="edatatype"><title>Annotations on EDataType</title>
			<p>Every JPA annotation which is relevant for a non-reference type java member can also be specified on an EDataType. 
			Setting annotations on an EDataType has as advantage that the annotation is used in every location in which the EDataType is
			used. For example the column length annotation can be defined on EDataType level and is then automatically added to 
			each EAttribute which uses this EDataType. The annotations on EAttribute level take precedence so if both the EAttribute 
			and the EDataType have the same annotation then the annotation on the EAttribute is used.</p>
			</section>
			<section id="transient">
				<title>Transient on EClass</title>
				<p>The Transient annotation can also be used on an EClass. This prevents an EClass from being mapped and be persisted.</p>
				<p>This means also that in case that the super EClass of an EClass is transient that the properties of the super EClass are 
				not persisted and that the sub EClass requires its own identifier/primary key properties.</p>
			</section>
		
		<section><title>Unique annotation added to OneToMany to force a join table for 1:n relations</title>
		<p>In a relational database 1:n relations are often modeled by adding a foreign-key (to the 
		parent) in the child table/object. The disadvantage of this approach is that duplicates 
		are not supported. To support duplicates in an elist a join table is required. To signal to 
		Teneo, that a join table should be used, the annotation as in this example can be used:</p>
				<source><![CDATA[
<xsd:element name="joinedItem" type="xsd:anyURI" ecore:reference="this:Item" maxOccurs="unbounded">
	<xsd:annotation>
		<xsd:appinfo source="teneo.jpa">@OneToMany(unique=false)</xsd:appinfo>
	</xsd:annotation>
</xsd:element>
			]]></source>
		<p>Based on this annotations Teneo will generate a join table for this model. Note that 
		this annotation can be combined with the indexed annotation.</p>
		<p><em>The unique annotation does not exist in the EJB3 spec and is an Teneo extension.</em></p>
		</section>
		
		<section id="indexed"><title>Indexed Annotation</title>
		<p>The http://annotation.elver.org/Indexed annotation can be used to signal to Elver that a certain association does
		not require an index column and has a bag like behavior. 
		See <a href="hibernate_relations.html#Mapping+non-indexed+relations">here</a>
		for more information.</p>
		</section>
			
			<section>
				<title>EmbeddedID annotation</title>
				<p>EmbeddedID lets you use an embedded class as an entity's composite primary key.</p>
				<p><em>Note: in general, composite primary keys are only necessary for legacy data models.
					It's strongly recommended to use single (non-composite) keys for new data models.</em></p>
				<p>Teneo requires that the composite key's class is an EObject, as it needs ECore metadata to define the correct mapping.</p>
			</section>
			
			<section id="lob_notes">
				<title>Lob annotation</title>
				<p>
					Some database engines - for example, MySQL - have different BLOB types for different data sizes.
					(TINYBLOB, MEDIUMBLOB, LARGEBLOB.) 
				</p>
				<p>The actual BLOB type used by Hibernate is thus dependent upon the column length, but the default
					column length of 255 is often too small to acommodate typical BLOB data. </p>
				<p>Therefore you'll need to add a Column.length annotation to the property specifying the maximum possible size of the BLOB data, as shown below:</p>
				<source>
<![CDATA[<xsd:element name="photo" type="xsd:base64Binary" minOccurs="0">
	<xsd:annotation>
		<!-- Map to a 'binary' field. -->
		<xsd:appinfo source="teneo.jpa">
			@Lob
			<!-- Use 1Mb maximum length. (MEDIUMBLOB in MySQL.) -->
			@Column(length=1048576)
		</xsd:appinfo>
	</xsd:annotation>
</xsd:element>]]>
				</source>
			</section>
			
		</section>
		
	</body>
</document>
