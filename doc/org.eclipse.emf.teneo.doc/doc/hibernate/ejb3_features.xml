<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2005-2006, Elver.org (http://www.elver.org).

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<!--
	@author <a href="mtaal@elver.org">Martin Taal</a>
	@version $Revision: 1.1 $ $Date: 2006/08/03 09:58:07 $
-->

<!DOCTYPE document PUBLIC
	"-//APACHE//DTD Documentation V2.0//EN"
	"http://forrest.apache.org/dtd/document-v20.dtd">

<document> 
	<header> 
		<title>Supported EJB3 Annotation Features</title> 
	</header> 
	<body>
		<section id="featuresejb3">
			<title>EJB3 Annotation Features</title>
			<p>The goal is to support all EJB3 persistence annotations.</p>
			<p>You can download the EJB 3.0 Persistence Specification from the
				<a href="http://jcp.org/aboutJava/communityprocess/final/jsr220/index.html">jsr-220 download page</a>. The
				relevant document is &quot;ejb-3_0-fr-spec-persistence.pdf&quot;.</p>
			<p>The numbers in the listings below refer to the sections in chapter 9 of the specification.</p>
		</section>
		<section>
			<title>Supported Annotations</title>
			<p>The EJB3 annotations listed below are supported as of the current release. &quot;Supported&quot; means that there are test
				cases showing the annotation is correctly translated to an object-relational mapping and that the annotation works as
				expected when persisting and retrieving objects to/from a database.</p>
			<p>Supported as of the current release:</p>
				<ul>
				<li>9.1.1 Table Annotation</li>
				<li>9.1.2: SecondaryTable Annotation</li>
				<li>9.1.3: SecondaryTables Annotation</li>
				<li>9.1.4: UniqueConstraint Annotation</li>
				<li>9.1.5: Column Annotation</li>
				<li>9.1.6: JoinColumn Annotation</li>
				<li>9.1.7: JoinColumns Annotation</li>
				<li>9.1.8: Id Annotation</li>
				<li>9.1.9: GeneratedValue Annotation</li>
				<li>9.1.10: AttributeOverride Annotation</li>
				<li>9.1.11: AttributeOverrides Annotation</li>
				<li>9.1.12: AssociationOverride Annotation</li>
				<li>9.1.13: AssociationOverrides Annotation</li>
				<li>9.1.14: EmbeddedId Annotation</li>
				<li>9.1.15: IdClass Annotation</li>
				<li>9.1.16: Transient Annotation</li>
				<li>9.1.17: Version Annotation</li>
				<li>9.1.18: Basic Annotation</li>
				<li>9.1.19: Lob Annotation</li>
				<li>9.1.20: Temporal Annotation (no special support required, handled automatically)</li>
				<li>9.1.21: Enumerated Annotation (the Enumerate class must have a get(int) and get(String) method which returns an instance of the Enumerate class)</li>
				<li>9.1.22: ManyToOne Annotation</li>
				<li>9.1.23: OneToOne Annotation</li>
				<li>9.1.24: OneToMany Annotation</li>
				<li>9.1.25: JoinTable Annotation</li>
				<li>9.1.26: ManyToMany Annotation</li>
				<li>9.1.28: OrderBy Annotation</li>
				<li>9.1.29: Inheritance Annotation</li>
				<li>9.1.30: DiscriminatorColumn Annotation</li>
				<li>9.1.31: Discriminator Annotation</li>
				<li>9.1.32: PrimaryKeyJoinColumn Annotation</li>
				<li>9.1.34: Embeddable Annotation</li>
				<li>9.1.35: Embedded Annotation</li>
				<li>9.1.36: MappedSuperclass Annotation</li>
				<li>9.1.37: SequenceGenerator Annotation</li>
				<li>9.1.38: TableGenerator Annotation</li>
				</ul>
			</section>
			<section>
				<title>Currently Unsupported Annotations</title>
				<p>The following annotations are not yet supported:</p>
				<ul>
				<li>9.1.27: MapKey Annotation</li>
				<li>9.1.33: PrimaryKeyJoinColumns Annotation</li>
				</ul>
		</section>
		
		<section>
			<title>Annotation notes</title>
			<section id="edatatype"><title>Annotations on EDataType</title>
			<p>Every ejb3 annotation which is relevant for a non-reference type java member can also be specified on an EDataType. 
			Setting annotations on an EDataType has as advantage that the annotation is used in every location in which the EDataType is
			used. For example the column length annotation can be defined on EDataType level and is then automatically added to 
			each EAttribute which uses this EDataType. The annotations on EAttribute level take precedence so if both the EAttribute 
			and the EDataType have the same annotation then the annotation on the EAttribute is used.</p>
			</section>
			<section id="transient">
				<title>Transient on EClass</title>
				<p>The Transient annotation can also be used on an EClass. This prevents an EClass from being mapped and be persisted.</p>
				<p>This means also that in case that the super EClass of an EClass is transient that the properties of the super EClass are 
				not persisted and that the sub EClass requires its own identifier/primary key properties.</p>
			</section>
			<section id="secondarytables_notes">
				<title>SecondaryTable annotation</title>
				<p>
					Mapping properties to secondary tables works as follows.
				</p>
				<p>
					First, define one or more SecondaryTable annotations for the type in question:
				</p>
				<source><![CDATA[<xsd:complexType name="Person">
	<xsd:annotation>
		<!-- Declare two secondary tables. -->
		<xsd:appinfo source="http://ejb.elver.org/SecondaryTables" ecore:key="value">st1 st2</xsd:appinfo>
		<xsd:appinfo source="http://ejb.elver.org/SecondaryTable/st1" ecore:key="name">person_address</xsd:appinfo>
		<xsd:appinfo source="http://ejb.elver.org/SecondaryTable/st2" ecore:key="name">person_photo</xsd:appinfo>
	</xsd:annotation>
	<xsd:sequence>
		<!-- Child elements here... -->
	</xsd:sequence>
</xsd:complexType>]]></source>
				<p>Second, define a Column.table annotation for each property that should be mapped to a secondary table:</p>
				<source><![CDATA[<xsd:element name="address" type="xsd:string">
	<xsd:annotation>
		<!-- Map to person_address table. -->
		<xsd:appinfo source="http://ejb.elver.org/Column" ecore:key="table">person_address</xsd:appinfo>
	</xsd:annotation>
</xsd:element>
<xsd:element name="photo" type="xsd:base64Binary">
	<xsd:annotation>
		<xsd:appinfo source="http://ejb.elver.org/Lob">true</xsd:appinfo>
		<!-- Map to person_photo table. -->
		<xsd:appinfo source="http://ejb.elver.org/Column" ecore:key="table">person_photo</xsd:appinfo>
	</xsd:annotation>
</xsd:element>]]></source>
			</section>
			
			<section>
				<title>EmbeddedID annotation</title>
				<p>EmbeddedID lets you use an embedded class as an entity's composite primary key.</p>
				<p><em>Note: in general, composite primary keys are only necessary for legacy data models.
					It's strongly recommended to use single (non-composite) keys for new data models.</em></p>
				<p>Elver requires that the composite key's class is an EObject, as it needs ECore metadata to define the correct mapping.</p>
			</section>
			
			<section id="lob_notes">
				<title>Lob annotation</title>
				<p>
					Some database engines - for example, MySQL - have different BLOB types for different data sizes.
					(TINYBLOB, MEDIUMBLOB, LARGEBLOB.) 
				</p>
				<p>The actual BLOB type used by Hibernate is thus dependent upon the column length, but the default
					column length of 255 is often too small to acommodate typical BLOB data. </p>
				<p>Therefore you'll need to add a Column.length annotation to the property specifying the maximum possible size of the BLOB data, as shown below:</p>
				<source>
<![CDATA[<xsd:element name="photo" type="xsd:base64Binary" minOccurs="0">
	<xsd:annotation>
		<!-- Map to a 'binary' field. -->
		<xsd:appinfo source="http://ejb.elver.org/Lob">true</xsd:appinfo>
		<!-- Use 1Mb maximum length. (MEDIUMBLOB in MySQL.) -->
		<xsd:appinfo source="http://ejb.elver.org/Column" ecore:key="length">1048576</xsd:appinfo>
	</xsd:annotation>
</xsd:element>]]>
				</source>
			</section>
			
		</section>
		
	</body>
</document>
